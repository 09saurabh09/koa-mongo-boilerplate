#!/usr/bin/env node

/**
 * Module dependencies.
 */

"use strict";


var app = require('../app');
var debug = require('debug')('self-signup:server');
var http = require('http');

const cluster = require("cluster");
const isDevelopmentEnv = NODE_ENV === 'development';
const numCPUs = isDevelopmentEnv ? 1 : Math.min(8, require("os").cpus().length);

if (!isDevelopmentEnv && cluster.isMaster) {
  // this is the master process
  let cworker, _i;
  for (cworker = _i = 1; 1 <= numCPUs ? _i <= numCPUs : _i >= numCPUs;
       cworker = 1 <= numCPUs ? ++_i : --_i) {
    cluster.fork();
  }
  cluster.on("exit", function (worker, code, signal) {
    console.log(`worker ${worker && worker.id} died. Starting a new worker:`, code, signal);
    return cluster.fork();
  });
  return true;
}

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');

/**
 * Create HTTP server.
 */

var server = http.createServer(app.callback());

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
